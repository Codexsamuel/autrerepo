#!/usr/bin/env node

/**
 * Script de test et diagnostic pour les probl√®mes d'affichage mobile
 * DL Solutions - Test Mobile Display
 */

const fs = require('fs');
const path = require('path');

console.log('üîç DIAGNOSTIC AFFICHAGE MOBILE DL SOLUTIONS');
console.log('===========================================\n');

// Configuration
const projectRoot = process.cwd();
const criticalFiles = [
  'app/layout.tsx',
  'app/mobile-fixes.css',
  'app/globals.css',
  'next.config.js',
  'tailwind.config.ts',
  'package.json'
];

// V√©rifications critiques
function checkCriticalFiles() {
  console.log('üìÅ V√âRIFICATION DES FICHIERS CRITIQUES:');
  
  let allFilesExist = true;
  
  criticalFiles.forEach(file => {
    const filePath = path.join(projectRoot, file);
    const exists = fs.existsSync(filePath);
    
    if (exists) {
      console.log(`‚úÖ ${file} - Pr√©sent`);
    } else {
      console.log(`‚ùå ${file} - MANQUANT`);
      allFilesExist = false;
    }
  });
  
  console.log('');
  return allFilesExist;
}

// V√©rification du viewport meta tag
function checkViewportMeta() {
  console.log('üì± V√âRIFICATION VIEWPORT META TAG:');
  
  const layoutPath = path.join(projectRoot, 'app/layout.tsx');
  
  if (!fs.existsSync(layoutPath)) {
    console.log('‚ùå app/layout.tsx non trouv√©');
    return false;
  }
  
  const layoutContent = fs.readFileSync(layoutPath, 'utf8');
  
  // V√©rifier la pr√©sence du viewport meta tag
  const viewportRegex = /<meta name="viewport"[^>]*>/;
  const hasViewport = viewportRegex.test(layoutContent);
  
  if (hasViewport) {
    console.log('‚úÖ Viewport meta tag pr√©sent');
    
    // V√©rifier le contenu du viewport
    const viewportMatch = layoutContent.match(viewportRegex);
    if (viewportMatch) {
      console.log(`   Contenu: ${viewportMatch[0]}`);
    }
  } else {
    console.log('‚ùå Viewport meta tag MANQUANT');
  }
  
  // V√©rifier l'import du CSS mobile
  const mobileCssImport = /import.*mobile-fixes\.css/;
  const hasMobileCss = mobileCssImport.test(layoutContent);
  
  if (hasMobileCss) {
    console.log('‚úÖ Import mobile-fixes.css pr√©sent');
  } else {
    console.log('‚ùå Import mobile-fixes.css MANQUANT');
  }
  
  console.log('');
  return hasViewport && hasMobileCss;
}

// V√©rification du CSS mobile
function checkMobileCSS() {
  console.log('üé® V√âRIFICATION CSS MOBILE:');
  
  const mobileCssPath = path.join(projectRoot, 'app/mobile-fixes.css');
  
  if (!fs.existsSync(mobileCssPath)) {
    console.log('‚ùå mobile-fixes.css non trouv√©');
    return false;
  }
  
  const cssContent = fs.readFileSync(mobileCssPath, 'utf8');
  
  // V√©rifications importantes
  const checks = [
    { name: 'Media queries mobile', pattern: /@media.*max-width.*768px/, required: true },
    { name: 'Reset mobile viewport', pattern: /box-sizing.*border-box/, required: true },
    { name: 'Fix navigation mobile', pattern: /sidebar.*position.*fixed/, required: true },
    { name: 'Fix grilles mobile', pattern: /grid-template-columns.*1fr/, required: true },
    { name: 'Fix boutons touch', pattern: /min-height.*44px/, required: true },
    { name: 'Fix inputs iOS', pattern: /font-size.*16px/, required: true },
    { name: 'Layout responsive', pattern: /responsive-layout/, required: true },
    { name: 'Mobile card styles', pattern: /mobile-card/, required: true },
    { name: 'PWA standalone', pattern: /display-mode.*standalone/, required: false },
    { name: 'Dark mode mobile', pattern: /prefers-color-scheme.*dark/, required: false }
  ];
  
  let allChecksPassed = true;
  
  checks.forEach(check => {
    const hasPattern = check.pattern.test(cssContent);
    
    if (hasPattern) {
      console.log(`‚úÖ ${check.name}`);
    } else if (check.required) {
      console.log(`‚ùå ${check.name} - MANQUANT`);
      allChecksPassed = false;
    } else {
      console.log(`‚ö†Ô∏è  ${check.name} - Optionnel (non pr√©sent)`);
    }
  });
  
  console.log('');
  return allChecksPassed;
}

// V√©rification de la configuration Next.js
function checkNextConfig() {
  console.log('‚öôÔ∏è  V√âRIFICATION CONFIGURATION NEXT.JS:');
  
  const nextConfigPath = path.join(projectRoot, 'next.config.js');
  
  if (!fs.existsSync(nextConfigPath)) {
    console.log('‚ùå next.config.js non trouv√©');
    return false;
  }
  
  const configContent = fs.readFileSync(nextConfigPath, 'utf8');
  
  // V√©rifications
  const checks = [
    { name: 'Compression activ√©e', pattern: /compress.*true/, required: true },
    { name: 'Optimisation images', pattern: /formats.*webp/, required: false },
    { name: 'Headers CORS', pattern: /Access-Control-Allow-Origin/, required: false }
  ];
  
  let allChecksPassed = true;
  
  checks.forEach(check => {
    const hasPattern = check.pattern.test(configContent);
    
    if (hasPattern) {
      console.log(`‚úÖ ${check.name}`);
    } else if (check.required) {
      console.log(`‚ùå ${check.name} - MANQUANT`);
      allChecksPassed = false;
    } else {
      console.log(`‚ö†Ô∏è  ${check.name} - Optionnel (non pr√©sent)`);
    }
  });
  
  console.log('');
  return allChecksPassed;
}

// V√©rification des d√©pendances
function checkDependencies() {
  console.log('üì¶ V√âRIFICATION DES D√âPENDANCES:');
  
  const packagePath = path.join(projectRoot, 'package.json');
  
  if (!fs.existsSync(packagePath)) {
    console.log('‚ùå package.json non trouv√©');
    return false;
  }
  
  const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  const dependencies = { ...packageContent.dependencies, ...packageContent.devDependencies };
  
  // D√©pendances importantes pour mobile
  const importantDeps = [
    'next',
    'react',
    'react-dom',
    'tailwindcss',
    'framer-motion',
    '@radix-ui/react-dialog',
    '@radix-ui/react-navigation-menu'
  ];
  
  let allDepsPresent = true;
  
  importantDeps.forEach(dep => {
    if (dependencies[dep]) {
      console.log(`‚úÖ ${dep} - ${dependencies[dep]}`);
    } else {
      console.log(`‚ùå ${dep} - MANQUANT`);
      allDepsPresent = false;
    }
  });
  
  console.log('');
  return allDepsPresent;
}

// G√©n√©ration de corrections automatiques
function generateMobileFixes() {
  console.log('üîß G√âN√âRATION DE CORRECTIONS MOBILE:');
  
  // V√©rifier si le fichier mobile-fixes.css existe et est complet
  const mobileCssPath = path.join(projectRoot, 'app/mobile-fixes.css');
  
  if (!fs.existsSync(mobileCssPath)) {
    console.log('‚ùå mobile-fixes.css manquant - cr√©ation n√©cessaire');
    return false;
  }
  
  const cssContent = fs.readFileSync(mobileCssPath, 'utf8');
  
  // V√©rifier si le contenu est suffisant
  if (cssContent.length < 1000) {
    console.log('‚ö†Ô∏è  mobile-fixes.css semble incomplet');
    return false;
  }
  
  console.log('‚úÖ mobile-fixes.css semble complet');
  
  // V√©rifier le layout.tsx
  const layoutPath = path.join(projectRoot, 'app/layout.tsx');
  
  if (!fs.existsSync(layoutPath)) {
    console.log('‚ùå layout.tsx manquant');
    return false;
  }
  
  const layoutContent = fs.readFileSync(layoutPath, 'utf8');
  
  // V√©rifier l'import du CSS mobile
  if (!layoutContent.includes('mobile-fixes.css')) {
    console.log('‚ö†Ô∏è  Import mobile-fixes.css manquant dans layout.tsx');
    return false;
  }
  
  console.log('‚úÖ Import mobile-fixes.css pr√©sent dans layout.tsx');
  console.log('');
  return true;
}

// Recommandations
function generateRecommendations() {
  console.log('üí° RECOMMANDATIONS POUR L\'AFFICHAGE MOBILE:');
  
  const recommendations = [
    '1. Tester sur diff√©rents appareils (iPhone, Android, tablette)',
    '2. V√©rifier les orientations portrait et paysage',
    '3. Tester avec diff√©rentes tailles d\'√©cran (320px √† 768px)',
    '4. V√©rifier la navigation tactile (boutons, liens)',
    '5. Tester les formulaires sur mobile',
    '6. V√©rifier les images et m√©dias',
    '7. Tester la performance de chargement',
    '8. V√©rifier l\'accessibilit√© (contraste, taille de texte)',
    '9. Tester le mode hors ligne (PWA)',
    '10. V√©rifier les animations et transitions'
  ];
  
  recommendations.forEach(rec => {
    console.log(`   ${rec}`);
  });
  
  console.log('');
}

// Test de serveur
async function testServer() {
  console.log('üåê TEST DE CONNEXION SERVEUR:');
  
  try {
    const http = require('http');
    
    const testRequest = () => {
      return new Promise((resolve, reject) => {
        const req = http.request({
          hostname: 'localhost',
          port: 3000,
          path: '/',
          method: 'GET',
          timeout: 5000
        }, (res) => {
          let data = '';
          res.on('data', chunk => data += chunk);
          res.on('end', () => {
            resolve({
              status: res.statusCode,
              headers: res.headers,
              hasViewport: data.includes('viewport'),
              hasMobileCss: data.includes('mobile-fixes.css')
            });
          });
        });
        
        req.on('error', reject);
        req.on('timeout', () => reject(new Error('Timeout')));
        req.end();
      });
    };
    
    const result = await testRequest();
    
    console.log(`‚úÖ Serveur accessible sur localhost:3000`);
    console.log(`   Status: ${result.status}`);
    console.log(`   Viewport meta: ${result.hasViewport ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Mobile CSS: ${result.hasMobileCss ? '‚úÖ' : '‚ùå'}`);
    
  } catch (error) {
    console.log(`‚ùå Serveur non accessible: ${error.message}`);
    console.log('   Assurez-vous que le serveur de d√©veloppement est d√©marr√© (npm run dev)');
  }
  
  console.log('');
}

// Fonction principale
async function main() {
  try {
    // V√©rifications de base
    const filesOk = checkCriticalFiles();
    const viewportOk = checkViewportMeta();
    const cssOk = checkMobileCSS();
    const configOk = checkNextConfig();
    const depsOk = checkDependencies();
    const fixesOk = generateMobileFixes();
    
    // Test serveur
    await testServer();
    
    // R√©sum√©
    console.log('üìä R√âSUM√â DU DIAGNOSTIC:');
    console.log('========================');
    
    const checks = [
      { name: 'Fichiers critiques', status: filesOk },
      { name: 'Viewport meta tag', status: viewportOk },
      { name: 'CSS mobile', status: cssOk },
      { name: 'Config Next.js', status: configOk },
      { name: 'D√©pendances', status: depsOk },
      { name: 'Corrections mobile', status: fixesOk }
    ];
  
    let passedChecks = 0;
    let totalChecks = checks.length;
    
    checks.forEach(check => {
      const status = check.status ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${check.name}`);
      if (check.status) passedChecks++;
    });
    
    console.log(`\nüìà Score: ${passedChecks}/${totalChecks} (${Math.round(passedChecks/totalChecks*100)}%)`);
    
    if (passedChecks === totalChecks) {
      console.log('\nüéâ Tous les tests sont pass√©s ! L\'affichage mobile devrait √™tre optimal.');
    } else {
      console.log('\n‚ö†Ô∏è  Certains probl√®mes ont √©t√© d√©tect√©s. Consultez les recommandations ci-dessous.');
    }
    
    generateRecommendations();
    
    // Instructions de test
    console.log('üß™ INSTRUCTIONS DE TEST MOBILE:');
    console.log('===============================');
    console.log('1. Ouvrez votre navigateur et allez sur http://localhost:3000');
    console.log('2. Ouvrez les outils de d√©veloppement (F12)');
    console.log('3. Activez le mode responsive (ic√¥ne mobile)');
    console.log('4. Testez diff√©rentes tailles d\'√©cran:');
    console.log('   - iPhone SE (375px)');
    console.log('   - iPhone 12 (390px)');
    console.log('   - Samsung Galaxy (360px)');
    console.log('   - iPad (768px)');
    console.log('5. V√©rifiez que tous les √©l√©ments s\'adaptent correctement');
    console.log('6. Testez la navigation mobile (menu hamburger)');
    console.log('7. V√©rifiez les formulaires et boutons');
    console.log('');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.message);
    process.exit(1);
  }
}

// Ex√©cution
if (require.main === module) {
  main();
}

module.exports = {
  checkCriticalFiles,
  checkViewportMeta,
  checkMobileCSS,
  checkNextConfig,
  checkDependencies,
  generateMobileFixes,
  testServer
}; 
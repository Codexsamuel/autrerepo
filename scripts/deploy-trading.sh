#!/bin/bash

# üöÄ Script de D√©ploiement - Davy Trading Platform
# Usage: ./scripts/deploy-trading.sh

set -e

echo "üöÄ D√©ploiement de Davy Trading Platform..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    log_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
fi

# 1. V√©rifier les d√©pendances
log_info "V√©rification des d√©pendances..."
if ! command -v pnpm &> /dev/null; then
    log_error "pnpm n'est pas install√©. Installez-le avec: npm install -g pnpm"
    exit 1
fi

if ! command -v git &> /dev/null; then
    log_error "git n'est pas install√©"
    exit 1
fi

# 2. Nettoyer et installer les d√©pendances
log_info "Nettoyage et installation des d√©pendances..."
rm -rf node_modules .next
pnpm install

# 3. Test des APIs
log_info "Test des APIs de trading..."
if node scripts/test-trading-apis.js; then
    log_success "APIs de trading fonctionnelles"
else
    log_warning "Certaines APIs peuvent ne pas fonctionner en production"
fi

# 4. Build de production
log_info "Build de production..."
if pnpm build; then
    log_success "Build r√©ussi"
else
    log_error "√âchec du build"
    exit 1
fi

# 5. Test local
log_info "Test local du build..."
if pnpm start &> /dev/null & then
    SERVER_PID=$!
    sleep 10
    
    # Test de l'API
    if curl -s "http://localhost:3000/api/trading/real-data?symbols=AAPL" > /dev/null; then
        log_success "API fonctionne en production"
    else
        log_warning "API peut avoir des probl√®mes en production"
    fi
    
    # Arr√™ter le serveur
    kill $SERVER_PID 2>/dev/null || true
else
    log_error "Impossible de d√©marrer le serveur de test"
    exit 1
fi

# 6. V√©rifier Git
log_info "V√©rification du statut Git..."
if [ -n "$(git status --porcelain)" ]; then
    log_warning "Il y a des changements non commit√©s"
    echo "Changements d√©tect√©s:"
    git status --short
    
    read -p "Voulez-vous commiter ces changements? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git add .
        git commit -m "feat: mise √† jour plateforme trading avec vraies donn√©es"
        log_success "Changements commit√©s"
    fi
fi

# 7. Push vers Netlify
log_info "D√©ploiement sur Netlify..."
if git push origin clean-start; then
    log_success "Code pouss√© vers Netlify"
else
    log_error "√âchec du push vers Netlify"
    exit 1
fi

# 8. V√©rification finale
log_info "V√©rification finale..."
echo ""
echo "üéâ D√©ploiement termin√© avec succ√®s !"
echo ""
echo "üìä URLs importantes:"
echo "   ‚Ä¢ Site principal: https://davy-trading-platform.netlify.app"
echo "   ‚Ä¢ Donn√©es r√©elles: https://davy-trading-platform.netlify.app/demo/real-trading"
echo "   ‚Ä¢ D√©mo compl√®te: https://davy-trading-platform.netlify.app/demo"
echo "   ‚Ä¢ Test APIs: https://davy-trading-platform.netlify.app/api-test"
echo ""
echo "üîß Configuration recommand√©e:"
echo "   ‚Ä¢ Ajoutez ALPHA_VANTAGE_API_KEY dans les variables d'environnement Netlify"
echo "   ‚Ä¢ V√©rifiez que tous les plugins Netlify sont d√©sactiv√©s sauf Next.js"
echo ""
echo "üìà Fonctionnalit√©s disponibles:"
echo "   ‚úÖ Donn√©es d'actions en temps r√©el (Yahoo Finance)"
echo "   ‚úÖ Cryptomonnaies (CoinGecko)"
echo "   ‚úÖ Taux de change (Exchange Rate)"
echo "   ‚úÖ Portefeuille simul√© avec vraies donn√©es"
echo "   ‚úÖ Interface responsive et moderne"
echo ""
echo "üöÄ Votre plateforme de trading est maintenant en ligne !" 
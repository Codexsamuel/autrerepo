#!/bin/bash

# =====================================================
# DAVY Trading Platform - Database Setup Script
# =====================================================
# Description: Script automatique pour configurer la base de donn√©es
# =====================================================

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}=====================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}=====================================================${NC}"
}

# V√©rifier si PostgreSQL est install√©
check_postgresql() {
    print_message "V√©rification de PostgreSQL..."
    
    if ! command -v psql &> /dev/null; then
        print_error "PostgreSQL n'est pas install√©. Veuillez l'installer d'abord."
        echo "Installation sur Ubuntu/Debian: sudo apt-get install postgresql postgresql-contrib"
        echo "Installation sur macOS: brew install postgresql"
        echo "Installation sur Windows: https://www.postgresql.org/download/windows/"
        exit 1
    fi
    
    print_message "PostgreSQL est install√© ‚úì"
}

# Cr√©er la base de donn√©es
create_database() {
    print_header "Cr√©ation de la base de donn√©es"
    
    read -p "Nom de la base de donn√©es (d√©faut: davy_trading_platform): " DB_NAME
    DB_NAME=${DB_NAME:-davy_trading_platform}
    
    read -p "Nom d'utilisateur PostgreSQL (d√©faut: postgres): " DB_USER
    DB_USER=${DB_USER:-postgres}
    
    print_message "Cr√©ation de la base de donn√©es '$DB_NAME'..."
    
    # Cr√©er la base de donn√©es
    createdb -U $DB_USER $DB_NAME 2>/dev/null || {
        print_warning "La base de donn√©es existe d√©j√† ou erreur de cr√©ation"
    }
    
    print_message "Base de donn√©es cr√©√©e ‚úì"
}

# Ex√©cuter les migrations
run_migrations() {
    print_header "Ex√©cution des migrations"
    
    print_message "Ex√©cution du sch√©ma principal..."
    psql -U $DB_USER -d $DB_NAME -f database/schema.sql
    
    print_message "Ex√©cution des migrations..."
    if [ -d "database/migrations" ]; then
        for migration in database/migrations/*.sql; do
            if [ -f "$migration" ]; then
                print_message "Ex√©cution de $(basename $migration)..."
                psql -U $DB_USER -d $DB_NAME -f "$migration"
            fi
        done
    fi
    
    print_message "Migrations ex√©cut√©es ‚úì"
}

# Peupler avec les donn√©es de test
seed_database() {
    print_header "Peuplement avec les donn√©es de test"
    
    read -p "Voulez-vous ins√©rer les donn√©es de test ? (y/n): " SEED_DATA
    if [[ $SEED_DATA =~ ^[Yy]$ ]]; then
        print_message "Insertion des donn√©es de test..."
        psql -U $DB_USER -d $DB_NAME -f database/seed.sql
        print_message "Donn√©es de test ins√©r√©es ‚úì"
    else
        print_warning "Donn√©es de test ignor√©es"
    fi
}

# Configurer les variables d'environnement
setup_environment() {
    print_header "Configuration des variables d'environnement"
    
    ENV_FILE=".env.local"
    
    if [ ! -f "$ENV_FILE" ]; then
        print_message "Cr√©ation du fichier .env.local..."
        cat > $ENV_FILE << EOF
# Database Configuration
DATABASE_URL=postgresql://$DB_USER@localhost:5432/$DB_NAME
DB_HOST=localhost
DB_PORT=5432
DB_NAME=$DB_NAME
DB_USER=$DB_USER
DB_PASSWORD=your_password_here

# Supabase Configuration (√† remplir manuellement)
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url_here
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# API Keys (√† remplir manuellement)
OPENAI_API_KEY=your_openai_api_key_here
ALPHA_VANTAGE_API_KEY=your_alphavantage_api_key_here
ELEVENLABS_API_KEY=your_elevenlabs_api_key_here

# Trading Configuration
TRADING_ENABLED=true
MAX_TRADE_AMOUNT=10000
RISK_LEVEL=medium

# AI Configuration
AI_MODEL=gpt-4
AI_TEMPERATURE=0.7
AI_MAX_TOKENS=2000

# Security
JWT_SECRET=your_jwt_secret_here
ENCRYPTION_KEY=your_encryption_key_here
EOF
        
        print_message "Fichier .env.local cr√©√© ‚úì"
        print_warning "Veuillez remplir manuellement les cl√©s API dans .env.local"
    else
        print_warning "Le fichier .env.local existe d√©j√†"
    fi
}

# V√©rifier la configuration
verify_setup() {
    print_header "V√©rification de la configuration"
    
    print_message "Test de connexion √† la base de donn√©es..."
    if psql -U $DB_USER -d $DB_NAME -c "SELECT version();" > /dev/null 2>&1; then
        print_message "Connexion √† la base de donn√©es r√©ussie ‚úì"
    else
        print_error "√âchec de la connexion √† la base de donn√©es"
        exit 1
    fi
    
    print_message "V√©rification des tables..."
    TABLE_COUNT=$(psql -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" | tr -d ' ')
    print_message "Nombre de tables cr√©√©es: $TABLE_COUNT ‚úì"
    
    print_message "V√©rification des donn√©es..."
    USER_COUNT=$(psql -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM users;" | tr -d ' ')
    print_message "Nombre d'utilisateurs: $USER_COUNT ‚úì"
}

# Cr√©er les sauvegardes
create_backup() {
    print_header "Cr√©ation de sauvegarde"
    
    BACKUP_DIR="database/backups"
    mkdir -p $BACKUP_DIR
    
    BACKUP_FILE="$BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S).sql"
    
    print_message "Cr√©ation de la sauvegarde: $BACKUP_FILE"
    pg_dump -U $DB_USER $DB_NAME > $BACKUP_FILE
    
    if [ $? -eq 0 ]; then
        print_message "Sauvegarde cr√©√©e avec succ√®s ‚úì"
    else
        print_error "√âchec de la cr√©ation de la sauvegarde"
    fi
}

# Afficher les informations de connexion
show_connection_info() {
    print_header "Informations de connexion"
    
    echo "Base de donn√©es: $DB_NAME"
    echo "Utilisateur: $DB_USER"
    echo "H√¥te: localhost"
    echo "Port: 5432"
    echo ""
    echo "Pour vous connecter:"
    echo "psql -U $DB_USER -d $DB_NAME"
    echo ""
    echo "URL de connexion:"
    echo "postgresql://$DB_USER@localhost:5432/$DB_NAME"
}

# Menu principal
main_menu() {
    print_header "DAVY Trading Platform - Configuration Base de Donn√©es"
    
    echo "1. Configuration compl√®te"
    echo "2. Cr√©er la base de donn√©es uniquement"
    echo "3. Ex√©cuter les migrations uniquement"
    echo "4. Ins√©rer les donn√©es de test uniquement"
    echo "5. Cr√©er une sauvegarde"
    echo "6. V√©rifier la configuration"
    echo "7. Quitter"
    echo ""
    
    read -p "Choisissez une option (1-7): " choice
    
    case $choice in
        1)
            check_postgresql
            create_database
            run_migrations
            seed_database
            setup_environment
            verify_setup
            show_connection_info
            ;;
        2)
            check_postgresql
            create_database
            ;;
        3)
            run_migrations
            ;;
        4)
            seed_database
            ;;
        5)
            create_backup
            ;;
        6)
            verify_setup
            ;;
        7)
            print_message "Au revoir !"
            exit 0
            ;;
        *)
            print_error "Option invalide"
            main_menu
            ;;
    esac
}

# Fonction d'aide
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Afficher cette aide"
    echo "  -a, --auto     Configuration automatique compl√®te"
    echo "  -d, --db       Cr√©er la base de donn√©es uniquement"
    echo "  -m, --migrate  Ex√©cuter les migrations uniquement"
    echo "  -s, --seed     Ins√©rer les donn√©es de test uniquement"
    echo "  -b, --backup   Cr√©er une sauvegarde"
    echo "  -v, --verify   V√©rifier la configuration"
    echo ""
    echo "Exemples:"
    echo "  $0 --auto      # Configuration compl√®te automatique"
    echo "  $0 --db        # Cr√©er la base de donn√©es"
    echo "  $0 --migrate   # Ex√©cuter les migrations"
}

# Traitement des arguments de ligne de commande
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    -a|--auto)
        check_postgresql
        create_database
        run_migrations
        seed_database
        setup_environment
        verify_setup
        show_connection_info
        ;;
    -d|--db)
        check_postgresql
        create_database
        ;;
    -m|--migrate)
        run_migrations
        ;;
    -s|--seed)
        seed_database
        ;;
    -b|--backup)
        create_backup
        ;;
    -v|--verify)
        verify_setup
        ;;
    "")
        main_menu
        ;;
    *)
        print_error "Option inconnue: $1"
        show_help
        exit 1
        ;;
esac

print_message "Configuration termin√©e avec succ√®s ! üéâ" 
#!/usr/bin/env node

/**
 * Script de d√©marrage du service de synchronisation
 * Ce script initialise et d√©marre le service de synchronisation automatique
 * pour maintenir les produits √† jour depuis les diff√©rents fournisseurs.
 */

const { startSyncService, getSyncService } = require('../lib/sync-service')

console.log('üöÄ D√©marrage du service de synchronisation DL Solutions...')

// Fonction pour afficher le statut du service
function displayStatus() {
  const service = getSyncService()
  const status = service.getStatus()
  const stats = service.getStats()
  
  console.log('\nüìä Statut du service:')
  console.log(`   ‚Ä¢ Service en cours: ${status.isRunning ? '‚úÖ Oui' : '‚ùå Non'}`)
  console.log(`   ‚Ä¢ Derni√®re sync: ${status.lastSync ? new Date(status.lastSync.timestamp).toLocaleString('fr-FR') : 'Aucune'}`)
  console.log(`   ‚Ä¢ Prochaine sync: ${status.nextSync ? new Date(status.nextSync).toLocaleString('fr-FR') : 'Non programm√©e'}`)
  
  console.log('\nüìà Statistiques:')
  console.log(`   ‚Ä¢ Total synchronisations: ${stats.totalSyncs}`)
  console.log(`   ‚Ä¢ Synchronisations r√©ussies: ${stats.successfulSyncs}`)
  console.log(`   ‚Ä¢ Synchronisations √©chou√©es: ${stats.failedSyncs}`)
  console.log(`   ‚Ä¢ Dur√©e moyenne: ${Math.round(stats.averageDuration)}ms`)
  
  console.log('\nüïê Derni√®res 24h:')
  console.log(`   ‚Ä¢ Synchronisations: ${stats.last24h.syncs}`)
  console.log(`   ‚Ä¢ Produits mis √† jour: ${stats.last24h.productsUpdated}`)
  console.log(`   ‚Ä¢ Produits ajout√©s: ${stats.last24h.productsAdded}`)
  console.log(`   ‚Ä¢ Produits supprim√©s: ${stats.last24h.productsRemoved}`)
  
  console.log('\n‚öôÔ∏è Configuration:')
  const config = status.config
  console.log(`   ‚Ä¢ Activ√©: ${config.enabled ? '‚úÖ' : '‚ùå'}`)
  console.log(`   ‚Ä¢ Intervalle: ${config.interval}`)
  console.log(`   ‚Ä¢ Fournisseurs: ${config.suppliers.join(', ')}`)
  console.log(`   ‚Ä¢ Mise √† jour prix: ${config.autoUpdatePrices ? '‚úÖ' : '‚ùå'}`)
  console.log(`   ‚Ä¢ Mise √† jour stock: ${config.autoUpdateStock ? '‚úÖ' : '‚ùå'}`)
  console.log(`   ‚Ä¢ Notifications: ${config.notifications ? '‚úÖ' : '‚ùå'}`)
}

// Fonction pour afficher les logs r√©cents
function displayRecentLogs() {
  const service = getSyncService()
  const logs = service.getLogs(10)
  
  if (logs.length === 0) {
    console.log('\nüìù Aucun log de synchronisation disponible')
    return
  }
  
  console.log('\nüìù Logs r√©cents:')
  logs.forEach((log, index) => {
    const status = log.status === 'success' ? '‚úÖ' : log.status === 'partial' ? 'üü°' : '‚ùå'
    const time = new Date(log.timestamp).toLocaleString('fr-FR')
    const supplier = log.supplier ? ` (${log.supplier})` : ''
    
    console.log(`   ${index + 1}. ${status} ${time}${supplier}`)
    console.log(`      Mise √† jour: ${log.productsUpdated}, Ajout√©s: ${log.productsAdded}, Supprim√©s: ${log.productsRemoved}`)
    console.log(`      Dur√©e: ${log.duration}ms`)
    
    if (log.errors.length > 0) {
      console.log(`      Erreurs: ${log.errors.join(', ')}`)
    }
  })
}

// Fonction principale
async function main() {
  try {
    // D√©marrer le service
    startSyncService()
    
    // Attendre un peu pour que le service s'initialise
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    // Afficher le statut initial
    displayStatus()
    displayRecentLogs()
    
    console.log('\nüéØ Service de synchronisation d√©marr√© avec succ√®s!')
    console.log('   Le service va maintenant synchroniser automatiquement les produits selon la configuration.')
    console.log('   Utilisez Ctrl+C pour arr√™ter le service.')
    
    // Garder le processus en vie
    process.on('SIGINT', () => {
      console.log('\nüõë Arr√™t du service de synchronisation...')
      const service = getSyncService()
      service.stop()
      console.log('‚úÖ Service arr√™t√© avec succ√®s')
      process.exit(0)
    })
    
    // Afficher le statut toutes les 5 minutes
    setInterval(() => {
      console.log('\n' + '='.repeat(60))
      displayStatus()
    }, 5 * 60 * 1000)
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du service:', error)
    process.exit(1)
  }
}

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur non captur√©e:', error)
  process.exit(1)
})

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason)
  process.exit(1)
})

// D√©marrer le script
main() 
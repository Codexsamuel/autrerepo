// Prisma schema for DL Solutions - CRM/ERP multi-sector
// Compatible with Supabase/PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id           String   @id @default(uuid())
  name         String
  sector       String
  logoUrl      String?
  email        String  @unique
  phone        String?
  address      String?
  website      String?
  siret        String?
  tvaNumber    String?
  rcs          String?
  capital      Float?
  legalForm    String?
  settings     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  users        User[]
  clients      Client[]
  transactions Transaction[]
  hotelRooms   HotelRoom[]
  hotelReservations HotelReservation[]
  properties   RealEstateProperty[]
  bankAccounts BankAccount[]
  insurancePolicies InsurancePolicy[]
}

model Client {
  id           String   @id @default(uuid())
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    String
  firstName    String
  lastName     String
  email        String?
  phone        String?
  address      String?
  companyName  String?
  position     String?
  source       String?
  status       String   // lead, prospect, client, inactive
  notes        String?
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  transactions Transaction[]
  hotelReservations HotelReservation[]
  bankAccounts BankAccount[]
  insurancePolicies InsurancePolicy[]
}

model Transaction {
  id           String   @id @default(uuid())
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    String
  client       Client?  @relation(fields: [clientId], references: [id])
  clientId     String?
  type         String   // sale, purchase, service, rental
  amount       Float
  currency     String   @default("EUR")
  status       String   // pending, completed, cancelled, refunded
  description  String?
  reference    String?
  paymentMethod String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model HotelRoom {
  id           String   @id @default(uuid())
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    String
  number       String
  type         String
  capacity     Int
  pricePerNight Float
  status       String   // available, occupied, maintenance, reserved
  amenities    String[]
  floor        Int?
  createdAt    DateTime @default(now())
  reservations HotelReservation[]
}

model HotelReservation {
  id           String   @id @default(uuid())
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    String
  room         HotelRoom @relation(fields: [roomId], references: [id])
  roomId       String
  client       Client?   @relation(fields: [clientId], references: [id])
  clientId     String?
  checkIn      DateTime
  checkOut     DateTime
  guests       Int
  totalAmount  Float
  status       String   // confirmed, checked_in, checked_out, cancelled
  specialRequests String?
  createdAt    DateTime @default(now())
}

model RealEstateProperty {
  id           String   @id @default(uuid())
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    String
  title        String
  type         String   // apartment, house, office, land, parking
  address      String
  city         String
  postalCode   String
  country      String   @default("France")
  surfaceArea  Float?
  rooms        Int?
  bedrooms     Int?
  bathrooms    Int?
  price        Float
  rentPrice    Float?
  status       String   // available, sold, rented, maintenance
  features     String[]
  images       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BankAccount {
  id           String   @id @default(uuid())
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    String
  client       Client   @relation(fields: [clientId], references: [id])
  clientId     String
  accountNumber String
  accountType  String   // checking, savings, business, investment
  balance      Float    @default(0)
  currency     String   @default("EUR")
  status       String   // active, suspended, closed
  interestRate Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model InsurancePolicy {
  id           String   @id @default(uuid())
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    String
  client       Client   @relation(fields: [clientId], references: [id])
  clientId     String
  policyNumber String
  type         String   // life, health, auto, home, business
  premium      Float
  coverageAmount Float
  startDate    DateTime
  endDate      DateTime
  status       String   // active, expired, cancelled
  terms        Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
} 
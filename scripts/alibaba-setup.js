#!/usr/bin/env node

/**
 * Alibaba Cloud Developer Toolkit Setup Script
 * Configuration automatique pour les APIs Alibaba 1688
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Configuration Alibaba Cloud Developer Toolkit...\n');

// V√©rifier si aliyun CLI est install√©
try {
  execSync('aliyun --version', { stdio: 'pipe' });
  console.log('‚úÖ Aliyun CLI install√©');
} catch (error) {
  console.log('‚ùå Aliyun CLI non trouv√©. Installation...');
  try {
    execSync('brew install aliyun-cli', { stdio: 'inherit' });
    console.log('‚úÖ Aliyun CLI install√© avec succ√®s');
  } catch (installError) {
    console.log('‚ùå Erreur lors de l\'installation d\'Aliyun CLI');
    console.log('Installation manuelle requise: brew install aliyun-cli');
    process.exit(1);
  }
}

// Configuration des variables d'environnement
const envPath = path.join(process.cwd(), '.env.local');
const envExamplePath = path.join(process.cwd(), '.env.example');

console.log('\nüìù Configuration des variables d\'environnement...');

// Lire le fichier .env.example s'il existe
let envContent = '';
if (fs.existsSync(envExamplePath)) {
  envContent = fs.readFileSync(envExamplePath, 'utf8');
}

// Ajouter les variables Alibaba si elles n'existent pas
const alibabaVars = [
  '# Alibaba 1688 API Configuration',
  'ALIBABA_APP_KEY=your_app_key_here',
  'ALIBABA_APP_SECRET=your_app_secret_here',
  'ALIBABA_ACCESS_TOKEN=your_access_token_here',
  'ALIBABA_REFRESH_TOKEN=your_refresh_token_here',
  'ALIBABA_API_BASE_URL=https://gw.open.1688.com/openapi',
  ''
].join('\n');

if (!envContent.includes('ALIBABA_APP_KEY')) {
  envContent += '\n' + alibabaVars;
}

// √âcrire le fichier .env.local
fs.writeFileSync(envPath, envContent);
console.log('‚úÖ Variables d\'environnement configur√©es dans .env.local');

// Cr√©er le script de test Alibaba
const testScriptPath = path.join(process.cwd(), 'scripts/test-alibaba.js');
const testScriptContent = `#!/usr/bin/env node

/**
 * Script de test pour les APIs Alibaba 1688
 */

const axios = require('axios');
require('dotenv').config({ path: '.env.local' });

async function testAlibabaAPI() {
  console.log('üß™ Test des APIs Alibaba 1688...\\n');

  const config = {
    appKey: process.env.ALIBABA_APP_KEY,
    appSecret: process.env.ALIBABA_APP_SECRET,
    accessToken: process.env.ALIBABA_ACCESS_TOKEN,
    refreshToken: process.env.ALIBABA_REFRESH_TOKEN,
    baseURL: process.env.ALIBABA_API_BASE_URL || 'https://gw.open.1688.com/openapi'
  };

  console.log('üìã Configuration:');
  console.log('- App Key:', config.appKey ? '‚úÖ Configur√©' : '‚ùå Manquant');
  console.log('- App Secret:', config.appSecret ? '‚úÖ Configur√©' : '‚ùå Manquant');
  console.log('- Access Token:', config.accessToken ? '‚úÖ Configur√©' : '‚ùå Manquant');
  console.log('- Refresh Token:', config.refreshToken ? '‚úÖ Configur√©' : '‚ùå Manquant');
  console.log('- Base URL:', config.baseURL);
  console.log('');

  if (!config.appKey || !config.appSecret) {
    console.log('‚ùå Configuration incompl√®te');
    console.log('üìù Veuillez configurer vos cl√©s API dans .env.local');
    console.log('üîó Obtenir les cl√©s: https://open.1688.com/');
    return;
  }

  try {
    // Test de l'API de recherche de cat√©gories
    console.log('üîç Test: Recherche de cat√©gories...');
    const categoryResponse = await axios.post(\`\${config.baseURL}/alibaba.category.search\`, {
      _aop_timestamp: Date.now(),
      _aop_signature: 'test_signature',
      access_token: config.accessToken,
      keyword: 'electronics'
    });
    console.log('‚úÖ API de cat√©gories fonctionnelle');
  } catch (error) {
    console.log('‚ùå Erreur API cat√©gories:', error.message);
  }

  try {
    // Test de l'API de recherche de produits
    console.log('üîç Test: Recherche de produits...');
    const productResponse = await axios.post(\`\${config.baseURL}/alibaba.product.search\`, {
      _aop_timestamp: Date.now(),
      _aop_signature: 'test_signature',
      access_token: config.accessToken,
      keyword: 'smartphone',
      pageSize: 10
    });
    console.log('‚úÖ API de produits fonctionnelle');
  } catch (error) {
    console.log('‚ùå Erreur API produits:', error.message);
  }

  console.log('\\nüéØ Prochaines √©tapes:');
  console.log('1. Obtenir vos vraies cl√©s API sur https://open.1688.com/');
  console.log('2. Mettre √† jour .env.local avec vos vraies cl√©s');
  console.log('3. Tester avec: node scripts/test-alibaba.js');
  console.log('4. Int√©grer dans votre application');
}

testAlibabaAPI().catch(console.error);
`;

fs.writeFileSync(testScriptPath, testScriptContent);
fs.chmodSync(testScriptPath, '755');
console.log('‚úÖ Script de test cr√©√©: scripts/test-alibaba.js');

// Cr√©er le guide de configuration
const guidePath = path.join(process.cwd(), 'docs/ALIBABA-SETUP-GUIDE.md');
const guideContent = `# üöÄ Guide de Configuration Alibaba 1688 API

## üìã Pr√©requis

- Compte Alibaba 1688 d√©veloppeur
- Aliyun CLI install√©
- Node.js et npm

## üîë √âtape 1: Obtenir les Cl√©s API

### 1. Cr√©er un compte d√©veloppeur
- Aller sur https://open.1688.com/
- Cr√©er un compte d√©veloppeur
- V√©rifier votre identit√©

### 2. Cr√©er une application
- Cliquer sur "Cr√©er une application"
- Remplir les informations requises
- S√©lectionner les APIs n√©cessaires:
  - \`alibaba.category.search\`
  - \`alibaba.product.search\`
  - \`alibaba.product.get\`
  - \`alibaba.category.attribute.get\`

### 3. Obtenir les cl√©s
- **App Key**: Cl√© publique de votre application
- **App Secret**: Cl√© secr√®te de votre application
- **Access Token**: Token d'acc√®s (g√©n√©r√© apr√®s autorisation)
- **Refresh Token**: Token de rafra√Æchissement

## ‚öôÔ∏è √âtape 2: Configuration Locale

### 1. Mettre √† jour .env.local
\`\`\`bash
# Alibaba 1688 API Configuration
ALIBABA_APP_KEY=your_real_app_key_here
ALIBABA_APP_SECRET=your_real_app_secret_here
ALIBABA_ACCESS_TOKEN=your_real_access_token_here
ALIBABA_REFRESH_TOKEN=your_real_refresh_token_here
ALIBABA_API_BASE_URL=https://gw.open.1688.com/openapi
\`\`\`

### 2. Tester la configuration
\`\`\`bash
node scripts/test-alibaba.js
\`\`\`

## üß™ √âtape 3: Tests

### Test des APIs
\`\`\`bash
# Test complet
npm run test:alibaba

# Test sp√©cifique
curl "http://localhost:3000/api/scraping/official?action=stats"
\`\`\`

## üîß √âtape 4: Int√©gration

### Dans votre application
\`\`\`javascript
import { Alibaba1688OfficialAPI } from '@/lib/scraper/alibaba-official-api';

const alibabaAPI = new Alibaba1688OfficialAPI();

// Recherche de produits
const products = await alibabaAPI.searchProducts('smartphone', 'Electronics', 10);

// D√©tails d'un produit
const productDetails = await alibabaAPI.getProductDetails('product_id');
\`\`\`

## üö® D√©pannage

### Erreur 403 - Acc√®s refus√©
- V√©rifier que vos cl√©s API sont correctes
- V√©rifier les permissions de votre application
- V√©rifier que l'Access Token n'a pas expir√©

### Erreur 401 - Non autoris√©
- R√©g√©n√©rer l'Access Token
- V√©rifier l'App Secret

### Erreur de signature
- V√©rifier la g√©n√©ration de signature
- V√©rifier le timestamp

## üìû Support

- Documentation officielle: https://open.1688.com/doc/
- Support technique: https://open.1688.com/support/
- Forum d√©veloppeurs: https://open.1688.com/forum/

## ‚úÖ Checklist

- [ ] Compte d√©veloppeur cr√©√©
- [ ] Application cr√©√©e
- [ ] Cl√©s API obtenues
- [ ] .env.local configur√©
- [ ] Tests pass√©s
- [ ] Int√©gration fonctionnelle
- [ ] Production d√©ploy√©e

---

**üéØ Votre syst√®me Alibaba 1688 est maintenant pr√™t pour la production !**
`;

fs.writeFileSync(guidePath, guideContent);
console.log('‚úÖ Guide de configuration cr√©√©: docs/ALIBABA-SETUP-GUIDE.md');

// Ajouter les scripts npm
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  if (!packageJson.scripts) {
    packageJson.scripts = {};
  }
  
  packageJson.scripts['test:alibaba'] = 'node scripts/test-alibaba.js';
  packageJson.scripts['setup:alibaba'] = 'node scripts/alibaba-setup.js';
  
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ Scripts npm ajout√©s');
}

console.log('\nüéâ Configuration Alibaba Cloud Developer Toolkit termin√©e !');
console.log('\nüìã Prochaines √©tapes:');
console.log('1. Obtenir vos cl√©s API sur https://open.1688.com/');
console.log('2. Configurer .env.local avec vos vraies cl√©s');
console.log('3. Tester avec: npm run test:alibaba');
console.log('4. Consulter le guide: docs/ALIBABA-SETUP-GUIDE.md');
console.log('\nüöÄ Votre syst√®me de scraping Alibaba 1688 est pr√™t !'); 
#!/bin/bash

# Script de d√©ploiement multi-plateforme pour DAVY Trading Platform
# Usage: ./scripts/deploy.sh [vercel|netlify|docker|all]

set -e

echo "üöÄ DAVY Trading Platform - D√©ploiement Multi-Plateforme"
echo "=================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        log_error "npm n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        log_error "Git n'est pas install√©"
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Build du projet
build_project() {
    log_info "Build du projet..."
    
    # Installer les d√©pendances
    npm install
    
    # Build pour la production
    npm run build
    
    log_success "Build termin√©"
}

# D√©ploiement Vercel (Backend)
deploy_vercel() {
    log_info "D√©ploiement sur Vercel (Backend)..."
    
    if ! command -v vercel &> /dev/null; then
        log_warning "Vercel CLI non install√©, installation..."
        npm install -g vercel
    fi
    
    # D√©ployer sur Vercel
    vercel --prod --yes
    
    log_success "D√©ploiement Vercel termin√©"
}

# D√©ploiement Netlify (Frontend)
deploy_netlify() {
    log_info "D√©ploiement sur Netlify (Frontend)..."
    
    if ! command -v netlify &> /dev/null; then
        log_warning "Netlify CLI non install√©, installation..."
        npm install -g netlify-cli
    fi
    
    # Build statique
    npm run build:static
    
    # D√©ployer sur Netlify
    netlify deploy --prod --dir=out
    
    log_success "D√©ploiement Netlify termin√©"
}

# D√©ploiement Docker
deploy_docker() {
    log_info "D√©ploiement Docker..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # Construire et d√©marrer les conteneurs
    docker-compose up -d --build
    
    log_success "D√©ploiement Docker termin√©"
    log_info "Frontend: http://localhost:3000"
    log_info "Backend: http://localhost:3001"
    log_info "Base de donn√©es: localhost:5432"
    log_info "Redis: localhost:6379"
}

# D√©ploiement complet
deploy_all() {
    log_info "D√©ploiement complet sur toutes les plateformes..."
    
    build_project
    deploy_vercel
    deploy_netlify
    deploy_docker
    
    log_success "D√©ploiement complet termin√© !"
}

# Fonction principale
main() {
    local target=${1:-all}
    
    check_prerequisites
    
    case $target in
        "vercel")
            build_project
            deploy_vercel
            ;;
        "netlify")
            build_project
            deploy_netlify
            ;;
        "docker")
            build_project
            deploy_docker
            ;;
        "all")
            deploy_all
            ;;
        *)
            log_error "Usage: $0 [vercel|netlify|docker|all]"
            exit 1
            ;;
    esac
}

# Ex√©cuter le script
main "$@" 